plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.6'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'org.cdc'
version '1.0-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

project.ext.builddate = new Date().format('wwuHH')

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }


idea {
    module {
        inheritOutputDirs = true
        excludeDirs = [file(".gradle"), file(".idea"), file(".github"), file("build"),
                       file("gradle"), file("jdk"), file("license"), file("logs")] as Set<File>
    }
}


configurations {
    testImplementation.extendsFrom compileOnly

    provided
    compileOnly.extendsFrom provided
    runtimeOnly.extendsFrom provided

    export.extendsFrom implementation
    export.canBeResolved = true

    win64
}

allprojects {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
        maven { url "https://maven.scijava.org/content/repositories/public/" }
        mavenLocal()
        mavenCentral()
    }
}

dependencies {
    //test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    //basic
    implementation fileTree(dir:'lib',includes: ['*.jar'])
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.18.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.31'
    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.20"

    // JFX natives
    win64 group: 'org.openjfx', name: 'javafx-base', version: '18.0.2', classifier: 'win'
    win64 group: 'org.openjfx', name: 'javafx-controls', version: '18.0.2', classifier: 'win'
    win64 group: 'org.openjfx', name: 'javafx-graphics', version: '18.0.2', classifier: 'win'
    win64 group: 'org.openjfx', name: 'javafx-media', version: '18.0.2', classifier: 'win'
    win64 group: 'org.openjfx', name: 'javafx-web', version: '18.0.2', classifier: 'win'
    win64 group: 'org.openjfx', name: 'javafx-swing', version: '18.0.2', classifier: 'win'
}

javafx {
    version = "18.0.2"
    modules = ['javafx.web', 'javafx.swing']
    configuration = 'provided' // we provide natives during deployment or with SDK
}

task pmInit{
    if (!file("run").exists()) {
        file("run").mkdir()
    }
}

apply from: 'resourcepacks/resourcePack.gradle'
task runPM(group: 'pm',type: JavaExec,dependsOn: exportPacks){
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath += sourceSets.main.runtimeClasspath
    main = "org.cdc.potatomaker.Launcher"
}

test {
    useJUnitPlatform()


    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    maxHeapSize = "1024m"

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
}
